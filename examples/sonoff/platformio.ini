; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
; 
; Note the board name is defined in e.g. .platformio/platforms/espressif32/boards/ttgo-lora32-v21.json
; and variants are in ~/.platformio/packages/framework-arduinoespressif32/variants/
; or ~/.platformio/packages/framework-arduinoespressif8266/variants


; custom common options

[platformio]
name: Frugal-IoT Sonoff
description: Frugal IoT - Sonoff R2 switch
src_dir = .

[common]
; These are flags common to pretty much all frugal-iot projects
; comment or uncomment debug flags based on need
build_flags_frugaliot =
    ;'-D LANGUAGE_DEFAULT="id"' ; Default language for portal (if not en) - de,nl,id currently supported
    -D SYSTEM_DISCOVERY_DEBUG
    -D SYSTEM_FRUGAL_DEBUG
    ;-D SYSTEM_LITTLEFS_DEBUG
    ;-D SYSTEM_MEMORY_DEBUG ; cos seeing intermittent crash after some period (>7 mins)
    -D SYSTEM_MQTT_DEBUG
    ;-D SYSTEM_OTA_DEBUG
    ;-D SYSTEM_POWER_DEBUG
    ;-D SYSTEM_SD_WANT ; Uses LittleFS by default
    ;-D SYSTEM_TIME_DEBUG
    -D SYSTEM_WIFI_DEBUG
    ;-D SYSTEM_WIFI_SCANPERIOD=50000        ; Slow down scanning so can easier debug captive portal
    ;-D CONTROL_BLINKEN_DEBUG
    ;-D CONTROL_LOGGERFS_DEBUG
    ;-D SENSOR_BH1750_DEBUG
    ;-D SENSOR_DHT_DEBUG 
    ;-D SENSOR_SOIL_DEBUG
    ;-D SENSOR_ENSAHT_DEBUG
    ;-D SENSOR_LOADCELL_DEBUG
    ;-D SENSOR_MS5803_DEBUG
    ;-D SENSOR_SHT_DEBUG
    ;-D SENSOR_SHT_ADDRESS=0x45 ; 0x44 (default) or 0x45 for D1 shields
    ;-D SENSOR_SOIL_DEBUG
    ;-D DEBUG_DNSSERVER ; If captive portal not seeing requests - as happening on ESP8266

; flags that apply only in main (the library can see them, but doesnt need them)
build_flags_main = 
    -D ITEAD_SONOFF ; Use this rather than whatever board is defined for esp01_1m // not currently used

; project specific flags that are needed by the library 
; - being phased out (apart from debug flags) in favor of parameters from main.cpp
; but may be used where impact is across files, especially temporarily, for example where refactoring
build_flags_library = 
    '-D SYSTEM_OTA_PREFIX="sonoff"'

; build flags that only relate to boards with LoRaMesher
build_flags_loramesher = 
    ; LoRaMesher, for now, has a lot of flags here, will move some of this to main.cpp
    ; Both the t3_s3 and the ttgo boards we are testing use the same module
    ; feel free to move into per-board [env] (and submit a PR) if your own setup differs
    -D SYSTEM_LORAMESHER_MODULE=LoraMesher::LoraModules::SX1276_MOD
    -D SYSTEM_LORAMESHER_BAND=915.0F ; 868.0F for Europe, 915.0F for US/AU; 433.0F for Asia
    -D SYSTEM_LORAMESHER_DEBUG ; to get debugging at the app (not LoRaMesher or Radio) layers
    ;-D CORE_DEBUG_LEVEL=5 ; To get lots of debugging out of LoraMesher
    ;-D RADIOLIB_DEBUG_BASIC ; Debugging from RadioLib 

; Flags specific to project, but vary across dev-boards or variants
build_flags = 
    ${common.build_flags_frugaliot}
    ${common.build_flags_main}
    ${common.build_flags_library}

lib_deps = 
    Frugal-IoT
    ; Libraries specific to this hardware - sensor, actuator, etc
    
[env]
monitor_speed = 460800 ; If not 460800 then also change in main.cpp: frugal_iot.startSerial(newspeed, 5000);
upload_speed = 460800
framework = arduino
; Unclear if next line causes problems either way - if commented out then doesnt recognize uploaded system 
board_build.filesystem = littlefs ; Use LittleFS instead of SPIFFS
lib_compat_mode = strict
lib_deps =  ${common.lib_deps}
lib_ldf_mode = chain
;Uncomment, if seeing exceptions need decoding
; build_type = debug
; monitor_filters = esp8266_exception_decoder


[env:r2]
platform = espressif8266
board = sonoff_basic
;board = esp01_1m
; ftdi adapter - I think this is my specific one, so probably need to override 
; monitor_port = /dev/cu.usbserial-A5069RR4
board_build.flash_mode = dout
build_flags = 
    ${common.build_flags}
    ;'-D SYSTEM_OTA_SUFFIX="r2"' ; No OTA_KEY for Sonoff, there is not enough space (code > flash/2)
    -D PIN_WIRE_SDA=-1 ; To defeat a check in the Wire library that fails compile if there is no PIN_WIRE_SDA and SDA
    -D SDA=-1 ; To defeat a check in the Wire library that fails compile if there is no PIN_WIRE_SDA and SDA

; Note there are other Sonoffs 
; R3 is reputedly hard to program - inaccessible pins
; R4 is the ESP32 version - have some but not yet tested   
