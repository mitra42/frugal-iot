; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
; 
; Note the board name is defined in e.g. .platformio/platforms/espressif32/boards/ttgo-lora32-v21.json
; and variants are in ~/.platformio/packages/framework-arduinoespressif32/variants/
; or ~/.platformio/packages/framework-arduinoespressif8266/variants


; custom common options

[platformio]
name: Frugal-IoT Power
description: Frugal IoT - Power test suite - in progress
src_dir = .
;This src_dir line should be present if your program is in xxx.ino or commented out if your program is in src/main.cpp

[common]
; These are flags common to pretty much all frugal-iot projects
; comment or uncomment debug flags based on need
build_flags_frugaliot =
    ;'-D LANGUAGE_DEFAULT="id"' ; Default language for portal (if not en) - de,nl,id currently supported
    -D SYSTEM_DISCOVERY_DEBUG
    -D SYSTEM_FRUGAL_DEBUG
    ;-D SYSTEM_LITTLEFS_DEBUG
    ;-D SYSTEM_MEMORY_DEBUG ; cos seeing intermittent crash after some period (>7 mins)
    -D SYSTEM_MQTT_DEBUG
    ;-D SYSTEM_OTA_DEBUG
    -D SYSTEM_POWER_DEBUG
    ;-D SYSTEM_SD_WANT ; Uses LittleFS by default
    ;-D SYSTEM_TIME_DEBUG
    -D SYSTEM_WIFI_DEBUG
    ;-D SYSTEM_WIFI_SCANPERIOD=50000        ; Slow down scanning so can easier debug captive portal
    ;-D CONTROL_BLINKEN_DEBUG
    ;-D CONTROL_LOGGERFS_DEBUG
    ;-D SENSOR_BH1750_DEBUG
    ;-D SENSOR_DHT_DEBUG 
    ;-D SENSOR_ENSAHT_DEBUG
    ;-D SENSOR_LOADCELL_DEBUG
    ;-D SENSOR_MS5803_DEBUG
    ;-D SENSOR_SHT_DEBUG
    ;-D SENSOR_SHT_ADDRESS=0x45 ; 0x44 (default) or 0x45 for D1 shields
    ;-D SENSOR_SOIL_DEBUG
    ;-D DEBUG_DNSSERVER ; If captive portal not seeing requests - as happening on ESP8266

; flags that apply only in main (the library can see them, but doesnt need them)
build_flags_main = 

; project specific flags that are needed by the library 
; - being phased out (apart from debug flags) in favor of parameters from main.cpp
; but may be used where impact is across files, especially temporarily, for example where refactoring
build_flags_library = 
    '-D SYSTEM_OTA_PREFIX="power"'

; build flags that only relate to boards with LoRaMesher
build_flags_loramesher = 
    ; LoRaMesher, for now, has a lot of flags here, will move some of this to main.cpp
    ; Both the t3_s3 and the ttgo boards we are testing use the same module
    ; feel free to move into per-board [env] (and submit a PR) if your own setup differs
    -D SYSTEM_LORAMESHER_MODULE=LoraMesher::LoraModules::SX1276_MOD
    -D SYSTEM_LORAMESHER_BAND=915.0F ; 868.0F for Europe, 915.0F for US/AU; 433.0F for Asia
    -D SYSTEM_LORAMESHER_DEBUG ; to get debugging at the app (not LoRaMesher or Radio) layers
    ;-D CORE_DEBUG_LEVEL=5 ; To get lots of debugging out of LoraMesher
    ;-D RADIOLIB_DEBUG_BASIC ; Debugging from RadioLib 

; Flags specific to project, but vary across dev-boards or variants
build_flags = 
    ${common.build_flags_frugaliot}
    ${common.build_flags_main}
    ${common.build_flags_library}

lib_deps = 
    Frugal-IoT
    ; Libraries specific to this hardware - sensor, actuator, etc
    ; robtillaart/SHT85 ; included by frugal-iot (in library.json & library.properties)

; Group of build_flags_powerxxx so can be mixed and matched with different processors below
build_flags_powerlightwifi = 
    -D CORE_DEBUG_LEVEL=99 ; To get lots of debugging around sleep and other tasks
    ; Following are attempt to get LIGHTWIFI to work
    -D CONFIG_FREERTOS_USE_TRACE_FACILITY=1
    -D CONFIG_FREERTOS_USE_STATS_FORMATTING_FUNCTIONS=1
    -D CONFIG_FREERTOS_IDLE_TIME_BEFORE_SLEEP=2

    
; selecting a platform for board descriotions
platform_esp32 = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip ; works in both PlatformIO and PIOArduino extensions
;platform_packages = framework-arduinoespressif32@3.3.2 ; also possible, but mostly unneeded and wont always work

[env]
monitor_speed = 460800 ; If not 460800 then also change in main.cpp: frugal_iot.startSerial(newspeed, 5000);
upload_speed = 460800
framework = arduino
; Unclear if next line causes problems either way - if commented out then doesnt recognize uploaded system 
board_build.filesystem = littlefs ; Use LittleFS instead of SPIFFS
lib_compat_mode = strict
lib_deps =  ${common.lib_deps}
lib_ldf_mode = chain
;Uncomment, if seeing exceptions need decoding
; build_type = debug
; monitor_filters = esp8266_exception_decoder

[env:c3_pico]
platform = ${common.platform_esp32}
board = lolin_c3_mini ; use c3_mini board defs - but note define below which is special cased
board_build.variant = lolin_c3_pico
build_flags = 
    ${common.build_flags}
    ${common.build_flags_powerlightwifi}
    '-D SYSTEM_OTA_SUFFIX="c3_pico"'
    -D ARDUINO_LOLIN_C3_PICO ; if using C3_PICO use lolin_c3_mini as board and define here
    ; PR submitted https://github.com/espressif/arduino-esp32/pull/11851
    ; Until then patched into variant file but if that is auto-updated, can define below
    ; Remvoe this comment when PR accepted, and new version of Arudino-esp32 gets installed
    ; See Home(bottom left)/Platforms/espresif32/updates (none as of 2025sep23 even though PR merged)
    ;-D RGB_BUILTIN_LED_COLOR_ORDER=LED_COLOR_ORDER_RGB
board_build.partitions = huge_app.csv

[env:s2_mini]
platform = ${common.platform_esp32}
board = lolin_s2_mini
build_flags = 
    ${common.build_flags}
    '-D SYSTEM_OTA_SUFFIX="s2_mini"'

[env:lightwifi_s2_mini]
platform = ${common.platform_esp32}
board = lolin_s2_mini
build_flags = 
    ${common.build_flags}
    ${common.build_flags_powerlightwifi}
    '-D SYSTEM_OTA_SUFFIX="lightwifi_s2_mini"'

[env:d1_mini_pro] ; Including V2 (Green) V3 (ext antenna) V4 (I2C)
platform = espressif8266
board = d1_mini_pro
build_flags = 
    ${common.build_flags}
    '-D SYSTEM_OTA_SUFFIX="d1_mini_pro"'
board_build.partitions = huge_app.csv

[env:d1_mini] ; also for d1_mini_pro v2 (green) or 4Mb v3 (blue) which does not work with d1_mini_pro board defs
board = d1_mini
platform = espressif8266
build_flags =
    ${common.build_flags}
    '-D SYSTEM_OTA_SUFFIX="d1_mini"'

[env:ttgo]
platform = ${common.platform_esp32}
board = ttgo-lora32-v21
build_flags = 
    ${common.build_flags}
    ${common.build_flags_loramesher}
    '-D SYSTEM_OTA_SUFFIX="ttgo"'
board_build.partitions = huge_app.csv
lib_deps = 
    ${common.lib_deps}
    jaimi5/LoRaMesher
    ;https://github.com/LoRaMesher/LoRaMesher.git ; till radio.isGatewayRole published (its merged)
    adafruit/Adafruit SSD1306@^2.5.0
    adafruit/Adafruit GFX Library@^1.10.13
    
[env:t3s3]
platform = ${common.platform_esp32}
board = lilygo-t3-s3
board_build.variant = lilygo_t3_s3_sx127x
build_flags = 
    ${common.build_flags}
    ${common.build_flags_loramesher}
    '-D SYSTEM_OTA_SUFFIX="t3s3"'
; Need huge_app.csv as SSD and GFX push it over the size
board_build.partitions = huge_app.csv
lib_deps = 
    ${common.lib_deps}
    jaimi5/LoRaMesher
    ;https://github.com/LoRaMesher/LoRaMesher.git ; till isGatewayRole merged
    adafruit/Adafruit SSD1306@^2.5.0
    adafruit/Adafruit GFX Library@^1.10.13

