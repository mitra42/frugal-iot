/*
  Local Dev

  You can add new functions of classes here, without them being pushed to Git.

 */

#include "_settings.h"  // Settings for what to include etc
#ifdef LOCAL_DEV_WANT

// Next step is usually to define any default parameters, if they aren't defined in _local.h e.g. 
// #ifndef FOO_MS
// #define FOO_MS 1000
// #endif

#include "control.h"

// This is an example of defining a custom function for use in a control. 
Control::TCallback customAction = [](Control* self) {
    const float hum = self->inputs[0]->floatValue();
    const float lim = self->inputs[1]->floatValue();
    const float hysterisis = self->inputs[2]->floatValue();

    if (hum > (lim + hysterisis)) {
        ((OUTbool*)self->outputs[0])->set(true);
    }
    if (hum < (lim - hysterisis)) {
        ((OUTbool*)self->outputs[0])->set(false);
    }
  // If  lim-histerisis < hum < lim+histerisis then don't change setting
};



namespace localDev {

// Put your setup here, 
// 
// This is also good place to instantiate instances of classes as its called from frugal_iot.cpp
// Note if you use a subclass of Actuator, Sensor or Control, then the instance's setup() will be called as part of the Frugal_Base::setupAll() as called by frugal_iot.cpp 
void setup() {

// And here is an example of instantiating a custom control using that function
controls.push_back(new Control(
  "humidity_control",
  std::vector<IN*> {
    new INfloat("humiditynow", 0.0, "humiditynow", 0, 100, "blue", true),
    new INfloat("limit", 50.0, "humidity_limit", 0, 100, "red", false),
    new INfloat("hysterisis", 5.0, "hysterisis", 0, 20, "purple", false) // Note nullptr needed in .ino but not .cpp files :-(
    },
  std::vector<OUT*> {
    new OUTbool("out", false, "too_humid", "blue", true), // Default to control LED, controllable via "relay_control")
  },
  std::vector<Control::TCallback> {
    customAction
  }));
}

// Put your loop here, but note if you use a subclass of Actuator, Sensor or Control 
// then its loop member function will be called automatically and is not needed here
// In that case, the function still needs to exist - just empty 
void loop () {

}

} // namespace localDev

#endif 